var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/community/about/",title:"About Scicloj",description:"What #\rScicloj is an open, free and dynamic hub for building a Clojure ecosystem for data science, scientific computing and data engineering.\nIn short, it is for anyone who is interested in using Clojure to work with data.\nThere are various places where activities move forward (for more info check the Where section), and they are all open to discussion and contribution.\nWho #\rWe are Clojurians coming from very different backgrounds and with very different levels of knowledge around Clojure and data science who share a common goal: making Clojure and data science better by combining them.",content:"What #\rScicloj is an open, free and dynamic hub for building a Clojure ecosystem for data science, scientific computing and data engineering.\nIn short, it is for anyone who is interested in using Clojure to work with data.\nThere are various places where activities move forward (for more info check the Where section), and they are all open to discussion and contribution.\nWho #\rWe are Clojurians coming from very different backgrounds and with very different levels of knowledge around Clojure and data science who share a common goal: making Clojure and data science better by combining them.\nEveryone is welcome to contribute, to consume and to use Scicloj however they like.\nWhy #\rA few people met on the internet one day and they all shared the same thought: Clojure is great, data science is cool, let\u0026rsquo;s put them together to make a crying rainbow of awesomeness! The first issues encountered led to a couple of revelations: Clojure is indeed cool, but data science relies heavily on FOSS libraries and tools that in Clojureland are all scattered around and usually poorly documented.\nScicloj is an umbrella for libraries, tutorials, ideas and open discussion trying to move further the idea that not only data science is possible with Clojure, but it can be a very nice experience as well (and it just works!).\nHow #\rScicloj tries to create broad discussions, where community members can reason together about their common goals.\nAt the same time, it maintains dedicated task groups that can have discussion around certain topics, such as: machine learning, wrapping useful data science libraries for use with Clojure, writing tutorials, organizing the community, editing the Scicloj website, and more.\nIn addition to textual, everyday discussions, Scicloj encourages meetings in small groups, as well as larger gatherings.\nWhere #\rContact details\n"}).add({id:1,href:"/docs/community/getting_involved/",title:"Getting Involved",description:"Would you like to join our journey in making Clojure a joyful platform for data science?\nBelow are some suggested ways to get involved. If you are interested in any of these, or maybe have some other idea - then let us talk! We may possibly help in finding a nice way to begin.\nJoin our dev and study groups #\rScicloj is organizing a few dev groups and study groups that meet regularly to learn, to brainstorm, and to create.",content:" Would you like to join our journey in making Clojure a joyful platform for data science?\nBelow are some suggested ways to get involved. If you are interested in any of these, or maybe have some other idea - then let us talk! We may possibly help in finding a nice way to begin.\nJoin our dev and study groups #\rScicloj is organizing a few dev groups and study groups that meet regularly to learn, to brainstorm, and to create. Your perspective could be helpful there.\nShare your experience #\rHearing about your personal workflow, data stories, problems and ideas can be valuable to others. Just open a new topic at one of the other relevant chat streams, and share your thoughts.\nWrite a tutorial #\rWriting tutorials (either small or big) about working with data is central to our process. The importance is twofold: sharing realistic experiences, and realizing what may be missing or could be improved in our stack. You may just pick an existing tutorial and translate it to Clojure. Or, you can pick some fresh new data and start analysing them from scratch.\nJoin the organizing team #\rAre you interested in the human aspects of growing the community? Or, do you want to be involved in the thought process about the goals and priorities of this community? Then the scicloj organizing team would welcome you to join. Even if your time is limited, contributing your thought can be important.\nPair with a library author #\rLibrary authors need users. Some of the actively developed libraries would benefit a lot from a user trying to use them and sharing their findings.\nHelp building the website and knowledge base #\rThe scicloj website would love to have more people involved in it. Contributing to the content organization, writing opinionated blog posts, helping with the aesthetics \u0026ndash; all would be welcome.\nCreate some proof of concept #\rDo you think that something is missing in our stack? Then let us maybe create it! Beginning with a small proof of concept, you can test the idea with other community members. If you suggest your idea, maybe someone will be happy to join you, and you create it together.\nContribute to a library #\rIs there any library that you are curious to learn about or just want to help building? Then a good way to learn may be to contribute. This may be some help in adding a feature, adding some tests, or writing documentation. You can offer that to the library author. Some would be happy and might offer a nice way to begin.\nSubmit an issue #\rHave you found a bug or a missing feature? Probably, the maintainers of actively developed libraries would be happy to know about it. Usually, the project Issues page or the project Zulip stream would be the place to do that. Most projects mention the preferred ways of communication in their README.\n"}).add({id:2,href:"/docs/community/chat/",title:"Chat streams",description:"The Clojurians Zulip #\rMost of our communication takes place in specific streams at the Clojurians Zulip chat.\nSmall task groups often create ad-hoc streams for their task, but a lot of the communitcation takes place in more popular, long-living streams (examples below).\nMost streams are public, some are private. Usually, streams are chosen to be private not for secrecy, but for focus, and for creating an atmosphere where people are comfortable talking, knowing who are listening.",content:"The Clojurians Zulip #\rMost of our communication takes place in specific streams at the Clojurians Zulip chat.\nSmall task groups often create ad-hoc streams for their task, but a lot of the communitcation takes place in more popular, long-living streams (examples below).\nMost streams are public, some are private. Usually, streams are chosen to be private not for secrecy, but for focus, and for creating an atmosphere where people are comfortable talking, knowing who are listening.\nThis original announcement of the Clojurians Zulip by Gert Goet gives some context and explains why it makes sense for some parts of the Clojure community to move into Zulip. Scicloj followed that advice.\nRelevant active streams #\rHere are the main scicloj-related active streams, dedicated to certain subgroups, child communities or sister communities of scicloj.\nGeneral discussion and Q\u0026amp;A #\r #data-science - general data science topics  Dev chat of specific tools and libraries #\r  #tech.ml.dataset.dev - discussing tech.ml.dataset\n  #scicloj.ml-dev - discussing scicloj.ml\n  #cljplot-dev - cljplot develompemt\n  #saite-dev - development of Saite and related projects such as Hanami\n  #pink-gorilla-dev - development of Pink Gorilla\n  #notespace-dev - notespace development\n  #libpython-clj-dev - libpython-clj development and usage\n  #libapl-clj-dev - libapl-clj development and usage\n  #clojisr-dev - clojisr development\n  #r-interop - R-interop development and usage: various libraries such as graalvm-interop and clojisr\n  Study groups / dev groups #\rFor more information, see also the list of dev \u0026amp; study groups at the website.\n  #ds4clj - the Data Science for Clojure Devs course\n  #data-recur - recurring updates \u0026amp; discussions around building the emerging data stack\n  #sci-fu - Scicloj foundations study group - learning together to build the Clojure data science ecosystem\n  #visual-tools - the stream of the visual-tools group, discussing collaborations around tooling for data visualization and literate programming\n  #tensorflow-study - studying Tensorflow and its use from Clojure\n  #wolfram-clojure-bridge - a stream for the monthly meetings around the Clojure bridge to the Wolfram Language.\n  #real-world-data - a stream for the real-world-data events, discussing uses of Clojure in real-world data projects\n  #scicloj-org - a private stream of the scicloj organizing team - for anybody interested in building the scicloj community and discssing its goals and priorities - let us talk if you wish to join.\n  #ml-study - machine learning and data analysis study sessions\n  #sicmutils - updates and discussions about sicmutils and its study group\n  #scicloj-tutorials - discussing community efforts for creating tutorials (a bit inactive as of 2022 Q1)\n  General streams worth knowing about: #\r  #announce - aggregation of announcements of other Clojure communication platforms (Clojureverse, Reddit /r/Clojure, etc.)\n  #beginners\n  #clojure - general Clojure discussions\n  #slack-archive - an archive of selected channels of the Clojurians Slack (if some channel you like is not there, you may ask the admins at the #zulip stream to add it)\n  #new-members - introductions of new Clojurians Zulip members\n  #zulip - discussing the Zulip platform, asking for technical help\n  Inactive streams of the past, that might be of interest #\r  #covid-19 - studying COVID-19 data (past hackathons and general discussions)\n  #nov21-workshops - a stream for the re:Clojure 2021 workshops\n  #dec21-data-science-special - a stream for the 2021 re:Clojure Data Science Special event\n  Recommended practices #\rYou may wish to learn a little bit about the concepts of Zulip streams and topics. Note that all streams and topics (and even single messages) have URLs, that you can open at separate tabs in your browser.\nWhen joining Zulip, it is a good idea to present yourself at the #new-members / hello topic, and in general, at topics called \u0026lsquo;hello\u0026rsquo; or \u0026lsquo;personal introductions\u0026rsquo; at specific streams you are subscribing to, mainly this \u0026lsquo;hello\u0026rsquo; topic at the #data-science stream.\nWhen reading the feed to cactch up, it is sometimes comfortable to browse through the aggregate feed of all streams, or at the feed of a specific stream, such as #data-science.\nWhen writing messages, it is recommended to be at the page of a specific topic, e.g. #data-science / tech.ml.dataset. That would prevent some very common mistake, of writing under the wrong topic.\nYou may wish to configure the streams-notifications behaviours to your taste.\nTo discover conversations relevant to you, you may browse and subscribe to streams. To see the feed of all public streams, including those you are not subscribed to, you can look at this URL (note that we are filtering out the huge #slack-archive stream).\n"}).add({id:3,href:"/docs/community/contact/",title:"Contact",description:" scicloj@gmail.com GitHub Zulip Chat streams  Main data science stream   Twitter Youtube  ",content:" scicloj@gmail.com GitHub Zulip Chat streams  Main data science stream   Twitter Youtube  "}).add({id:4,href:"/docs/resources/libs/",title:"Tools and libraries",description:"Clojure tools and libraries for data-centric computing",content:" To supplement our opinionated discussions of the ecosystem, here is a less-opinionated, plain list of relevant libraries written by Clojurians. Not all libraries mentioned here are affiliated with Scicloj, but we seek to be in dialogue with library authors as much as possible.\nDo you know about anything relevant that is missing here? - Let us talk!\nFor every library, we mark whether it is actively developed (act), and whether it is still experimental (exp). A star (⭐) means that we know the library to be actively used and useful.\nWe tag libraries with the field they are relevant to.\n array - array programming tensor - tensor programming linalg - linear algebra native - interop with native-optimized libraries gpu - gpu support vis - data visualization and visual art vega - visualization using Vega/Vega-lite specifications lit - literate programming ui - building UIs for data exploration geo - geographical and geometrical data processing df - dataframe-like data structures and abstractions data - general data processing csv - csv import/export xl - Excel spreadsheets interaction json - json import/export xform - transducers support math - diverse math functions stat - statistics ts - time series analysis rand - simulation and random sampling prob - Bayesian computing and probabilistic programming ml - machine learning dnn - deep learning opt - optimization graph - graph algorithms and network analysis interop - general libraries for interop cljs - supports not only Clojure but also Clojurescript nlp - natural language processing  Other lists 🔗 #\rThese other lists of libraries are very relevant to the emerging Clojure data science stack:\n Clojurelog ⭐ by the XTDB team - a comparison of various Clojure-Datalog databases Clojure DSL resources ⭐ by Simon Gray - a curated list of mostly mature and/or actively developed Clojure resources relevant for dealing with domain-specific languages, in particular parsing and data transformation with/of DSLs. Clojure graph resources ⭐ by Simon Gray - a curated list of mostly mature and/or actively developed Clojure resources relevant for dealing with graph-like data  Diverse toolsets #\r fastmath ⭐ (act): math,ml,rand,stat - a collection of functions for mathematical and statistical computing, machine learning, etc., wrapping several JVM libraries spork: df,graph,opt,rand,ui,vis - a toolbox for data-science and operation research Incanter: csv,df,rand,stat,vis - an R-like data-science platform built on top of the core.matrix abstractions huri: df,stat,vis - a toolbox for data-science using plain sequences of maps  Optimization #\r matlib ⭐ (act): opt - optimisation and control theory tools and convenience functions based on Neanderthal.  Visual tools: literate programming and data visualization #\r Saite ⭐ (act): cljs,hiccup,lit,ui,vega,vis - data exploration, dashboards, and interactive documents Oz ⭐ (act): lit,vega,vis - data visuzliation using Vega/Vega-Lite and Hiccup, and a live-reload platform for literate-programming Clerk ⭐ (act): cljs,lit,vega,vis - local-first notebooks for Clojure Clay ⭐ (act): cljs,lit,vega,vis - a small tool for compatible dynamic experience over some of the other visual tools rmarkdown-clojure ⭐: lit,vis - rendering Clojure code in various format using Rmarkdown Pink-Gorilla/Goldly ⭐ (act): cljs,exp,lit,ui,vis - a port of the Gorilla REPL project using a Clojurescript (Reagent) frontend Org-babel-clojure ⭐: lt - executing Clojure inside Emacs Org-mode documents Devcards ⭐: cljs,lit - visual repl exprience for Clojurescript Notespace ⭐ (act): exp,lit - notebook experience with Clojure namespaces edited at any editor Reveal ⭐ (act): - browser-based data navigation GUI Portal ⭐ (act): - desktop data navigation GUI Gorilla-REPL: lit - a notebook application written in Clojure and Javascript proto-repl-charts: vis - an Atom plugin for displaying tables and graphs Maria: cljs,lit,vis - a Clojurescript coding environment for beginners  Vega rendering #\rIn addition to a few of the tools mentioned above, here is a list of dedicated tools dedicated mainly to handling Vega/Vega-lite specifications. See this conversation for some discussion of the differences and tradeoffs across these tools.\n darkstar ⭐: vega,vis - a minimal wrapper over Vega/Vega-lite as a single JVM-only Clojure library, using the GraalJS javascript runtime, which does not require GraalVM runtime to run. xvsy: cljs,vega,vis - grammer of graphics over Vega Vegan (act): vega,vis - a nodejs clojurescript library designed to validate and render Vega and Vega-lite files, supports docker-based setup Vega-clj (act): vega,vis - a clojure wrapper for the (node-based) Vega-cli and Vega-lite standalone scrips Optikon: vega,vis - a command line tool that wraps Vega and Vega-lite, using GraalVM polyglot programming Vegafx: vega,vis - a static-site viewer using javafx that renders Vega specs VL example gallery as EDN: - The vega lite example in EDN format, ready to be copy/pasted into Clojure code  Data visualization libraries #\r cljplot ⭐ (act): exp,vis - a data visualization platform written in Clojure and inspired by R\u0026rsquo;s ggplot2 and lattice libraries Hanami ⭐ (act): cljs,hiccup,ui,vega,vis - a template system for creating interactive data visualizations using Vega/Vega-lite, Reagent and Re-Com darkstar ⭐ (act): cljs,vega,vis - simple data visualization for Clojure/Clojurescript that using vega and darkstar for rendering  ⭐ (act): exp,vega,vis - a data visualization library for beginners (WIP) Clojure2D ⭐ (act): vis - Java2D wrapper + creative coding supporting functions (based on Processing and openFrameworks) Quil ⭐: vis - a clojure/clojuresctit wrapper for Processing thi-ng/geom ⭐: cljs,vis - 2d/3d geometry toolkit Gorilla-plot ⭐: vega,vis - plotting functions using Vega for Gorilla-REPL gg4clj: r,vis - a clojure DSL for creating ggplot2 plots using R gg4clj port: - by the Pink Gorilla project Analemma: cljs,exp,vis - generating charts and SVG with a syntax similar to Incanter\u0026rsquo;s and a visual theme similar to ggplot2. emacs-Vega-view (act): vega,vis - an emacs mode to facilitate interactive data visualization using Vega from within emacs. Supports elisp, json and clojure notations  Data processing #\r Specter ⭐ (act): cljs,data - declarative navigation of nested data structures for selection and transformation in Clojure and Clojurescript Meander ⭐ (act): cljs,data - transforming neseted data structures by declaratively declaring the shape of source and target datastructures xforms ⭐: cljs,data,xform - a collection of transduces and reducing functions Odin: data - processing nested data structures by extensible logic programming Charred ⭐ (act): csv,json - zero dependency efficient read/write of json and csv data. Semantic Csv: cljs,csv - higher level csv parsing/processing  Geospatial processing #\r geo ⭐ (act): geo - unifying several JVM libraries for geoprocessing with a Clojure API ovid ⭐ (act): exp,geo - protocols for geospatial concepts aurelius ⭐ (act): exp,geo,xform - transducible analysis of geospatial features geo-clj ⭐ (act): cljs,geo - encoding/decoding of geographic datatypes  Dataframe-like structures #\r tech.ml.dataset ⭐ (act): csv,df,stat,vis - abstractions for dataframe-like structures in clojure, based on dtype-next infrastructure tablecloth ⭐ (act): csv,df - a dataframe grammar wrapping tech.ml.dataset, inspired by serveral R libraries clojask ⭐ (act): df - a library for parallel computing of larger-than-memory datasets. Panthera: df,py - a Clojure API wrapping Python\u0026rsquo;s Pandas library koala: csv,df,exp - Pandas-like data-processing for clojure with some I/O functionality (experimental) dataframe: df - Pandas-like data processing for clojure danzig (act): df,exp,xform - Pandas-like data processing using transducers (danzig was formerly named wombat) bamboo: df - a minimal data processing library for Clojure, with some of the capabilities of pandas and numpy see also geni ⭐ under the Spark sub category below  Spreadsheets #\r Docjure ⭐ (act): xl - making it easy to read and write Excel spreadsheets as Clojure data kixi.large ⭐ (act): exp,xl - a tech.ml.dataset-friendly fork of Docjure, providing clear entry point at the workbook and sheet level and a way to insert images Excel-clj ⭐ (act): xl - building Excel spreadsheets from Clojure data in various forms such as trees, tables, and more fxl ⭐ (act): exp,xl - manipulating spreadsheets with a versatile API for handling various spreadsheet constructs Excel-templates: exp,xl - building Excel spreadsheets from Clojure data combined with an Excel sheet serving as a template  Array programming, linear algebra #\r dtype-next ⭐ (act): array,native,stat,tensor - abstractions and foundations for working with array-like structures and sequential structures Neanderthal ⭐ (act): array,gpu,linalg,native - matrix and linear algebra in Clojure tvm-clj (act): array,exp,gpu,linalg,native - bindings to tvm jutsu.matrix: array,gpu,linalg,native - bindigs to ND4J core.matrix: array,cljs,linalg,native - matrix abstractions, supporting diffent backends denisovan: array,gpu,linalg,native - Neanderthal backend for core.matrix  Deep learning #\r Deep Diamond ⭐ (act): dnn,gpu,native,tensor - infrastructure for tensor computation and deep learning clj-djl ⭐ (act): dnn,gpu,native,tensor - a wrapper for the Deep Java Library MXNet: dnn - bindings to Apache MXNet, a part of the MXNet project jutsu.ai: dnn - a wrapper for deeplearning4j Cortex: dnn - a deep learning library written in Clojure Flare: dnn - dynamic neural networks in Clojure  Statistics #\r kixi.stats ⭐ (act): rand,stat,xform - statistics and random sampling using transducers fitdistr ⭐ (act): stat - fitting distributions  Time series analysis #\r tide: ts - STL and FastDTW algorithms  Bayesian computing \u0026amp; probabilistic programming #\r inferme ⭐ (act): prob,rand,vis - extensible probabilistic programming in Clojure itself (rather than a language variation), with support for visualizations clj-stan ⭐: - A library for calling the Stan language from Clojure (by shelling out to cmdstan). bayadera: gpu,prob,rand,stat - Bayesian computing using the GPU sampling: rand - support srandom sampling of different kinds distributions: prob,rand - random sampling and some basic Bayesian computing for certain families of distributions metaprob: cljs,exp,prob,rand - an embedded languages for probabilistic programming and metaprogramming daphne: exp,prob - a probabilisic programming compiler from Clojure syntax to Pytorch anglican: cljs,prob,rand - a probabilistic programming language written in clojure, that supports a subset of clojure  Random sampling and simulations #\r masonclj ⭐ (act): rand - a Clojure wrapper of MASON, which is a Java library for discrete-event multiagent simulation and agent-based modeling. dsim.cljc ⭐ (act): cljs,rand - an event-driven engine for Clojure(script) heavily borrowing ideas from discrete-event simulation and hybrid dynamical systems date-gen (act): rand - randomized date generation supporting CSV output drand: rand - a client to the Drand randomness service  Science #\r sicmutils ⭐ (act): - a library for algebra, calculus, differential geometry and physics based on the SICM book by Sussman \u0026amp; Wisdom cljbox2d ⭐ (act): cljs - a Clojure/Clojurescript wrapper of the Box2D physics engine API  Machine learning #\r scicloj.ml ⭐ (act): ml - A machine learning platform supporting a large collection of algorithms and pipeline ergonomics clj-ml: ml - machine learning based on wrapping libraries such as the Weka Java library clj-boost: ml - a wrapper for XGBoost propaganda: ml - an implementation of the propagator computational model dvc: ml - A programming language independent tool for ML experiment tracking, Clojure fully supported  Genetic programming #\r Propeller ⭐ (act): ml - \u0026ldquo;Yet another Push-based genetic programming system in Clojure\u0026rdquo; Clojush (act): ml - an implementation of the Push programming language for genetic programming  Natural Language Processing #\r DataLinguist ⭐ (act): nlp - a Clojure wrapper for Stanford CoreNLP  Interop #\r Libpython-clj ⭐ (act): interop - interop with Python clj-python-trampoline ⭐ (act): interop - using libpython-clj from an already running python process, without needing any special python builds Libjulia-clj ⭐ (act): interop - Julia bindings for Clojure ClojisR ⭐ (act): interop - interop with R and Renjin (R on the JVM) graalvm-interop: interop - interop with FastR (GraalVM\u0026rsquo;s R) rdata: - A Renjin (pure-JVM R) wrapper to allow Clojure programs to easily read R\u0026rsquo;s RData file format from-scala: interop - interop with Scala Interop template project: interop - A project template which configure several interop libraries automaticaly using Docker other R interop libraries  Parallel computing #\r claypoole ⭐ (act): for,future,pmap - threadpool-based parallel versions of Clojure functions such as pmap, future, and for parallel ⭐: - parallel-enabled functions, addditional transducers and supporting utilities tesser ⭐: - a library for concurrent \u0026amp; commutative folds, including some statistical tasks and Hadoop support tech.parallel ⭐ (act): - parallelization and threading primitives  Distributed computing #\r titanoboa ⭐ (act): - a fully distributed, highly scalable and fault tolerant workflow orchestration platform onyx ⭐: - a library for distributed computation in the cloud overseer: - a library for building and running data pipelines  Hadoop #\r Parkour: - Hadoop MapReduce in idiomatic Clojure  Spark #\r geni ⭐ (act): df - a Spark wrapper sparkling: - a Spark wrapper flambo: - a Spark wrapper  Stream processing #\rKafka #\r jackdaw ⭐ (act): - a wrapper for Kafka and Kafka Streams kafka.clj ⭐ (act): - a wrapper for Kafka and Kafka Streams ksml ⭐ (act): - representing kafka streams topologies as data rp-jackdaw-clj: - various components for interacting with Kafka using Jackdaw  "}).add({id:5,href:"/docs/resources/reading/",title:"Reading",description:"Recommended reading",content:" Here are some suggested reading materials.\nDo you wish to add your tutorial to this list? Do you have any suggestions for this list? - Let us talk!\nBlogs #\r  Squid\u0026rsquo;s Blogs by Carin Meier - deep learning, MXNet, Python interop and other technical topics\n  Arthur Caillau\u0026rsquo;s Blog - featuring the \u0026ldquo;MXNet made simple\u0026rdquo; series\n  Dragan Djuric - numerical computing, linear algebra, high performance computing and deep learning\n  Christopher Small - discussing the development of Oz, among other things\n  Clojure Goes Fast - overviews tools and practices for profiling and improving performance in Clojure\n  Applied Science blog by Dave Liepmann, Matt Huebert and Jack Rusher - Deep learning, data visualization, data processing\n  Tutorials #\rTutorials play an important role on our journey to make Clojure an accessible, friendly platform for data science.\nOf course, they allow us to share and learn existing methods and practices. No less importantly, working on tutorials helps us see the toolset meet its use cases, and thus realize what is still missing, and what could be improved.\nGeneral Nextjournal collections #\r  Dieter Komentera - various topics\n  Tomasz Sulej - various topics\n  Alan Marazzi - various topics\n  Carin Meier - mainly Python interop\n  Chris Nuernberger - mainly Python interop\n  Math #\r Math for clojurists by Alan Marazzi  Data processing #\r techtest - comparing tech.ml.dataset with the analogous R packages - by Tomsaz Sulej  Transducers #\r A general introduction by Amit Ramon  Machine Learning #\rXGBoost #\r clj-boost - A tutorial by Alan Marazzi  Python interop #\r See mainly the growing list of tutorials at Squid\u0026rsquo;s Blogs mentioned above.  Plotting #\r Fun With Matplotlib by Chris Nuernberger. Panthera tutorials  R interop #\r Clojisr tutorials Clojisr examples with lots of vizualiations, by Tomsaz Sulej and others  Literate programming #\r Clojupyter examples Notespace tutorial  Data Visualization #\r vdquil - Examples from Ben Fry\u0026rsquo;s \u0026ldquo;Visualizing Data\u0026rdquo; in quil - by Dave Liepmann  Books #\r  Books by Dragan Djuric about Deep Learning and about Linear Algebra in Clojure - books developed alongside Dragan\u0026rsquo;s work on libraries in this fields\n  Clojure for Data Science by Henry Garner - a bit dated in terms of the stack it presents, but stll relevant in terms of the principles presented\n  Other collections of resources #\r Resources for Clojure beginners collected by Dmitri Sotnikov  "}).add({id:6,href:"/docs/resources/video/",title:"Video",description:"video resources",content:"re:Clojure 2021 #\rScicloj joined the London Clojurians in organizing the re:Clojure 2021 event and its workshops - ⭐ The following playlists are recommended as an up-to-date look into a few parts of the emerging data-science stack. ⭐\n Dec. 5th, re:Clojure 2021 Data Science Special - playlist Dec. 3rd-4th, re:Clojure 2021 Conference - playlist Nov., re:Clojure 2021 Workshops - playlist  Interviews #\r June 30th, 5pm UTC - Jon Anthony interviewed about Hanami \u0026amp; Saite by Alan Marazzi, Ethan Zane Miller and Vijay Kiran - video April 26th - Chris Nuernberger interviewed by Teodor Heggelund, Tomasz Sulej and Daniel Slutsky - video September 27th - Anthony Khong interviewed by Vijay Kiran, Teodor Heggelund and Daniel Slutsky about Geni - video  Public sessions of dev \u0026amp; study groups #\rdata-recur #\rIn the data-recur group, Clojure devs are sharing updates and collaborating on tools \u0026amp; libraries of the emerging Clojure data stack.\n July 29th, 2022 - the first meeting: clojure.walk, community updates  visual-tools #\rThe visual tools group is about creating collaborations across differnent tooling projects for data visualization and literate programming.\n Feb. 4th, 2022 - a first meeting of the visual-tools group Feb. 19th, 2022 - focusing on compatibility across tools Mar. 5th, 2022 - monthly - updates of ongoing projects Mar. 25th, 2022 - study session about Clerk Apr. 2nd, 2022 - monthly - updates of ongoing projects May 6th, 2022 - monthly - updates of ongoing projects May 27th, 2022 - a deep dive into Saturn June 3rd, 2022 - monthly - updates of ongoing projects: data cookbook, goldly studio, re-frame state management July 2nd, 2022 - monthly - updates of ongoing projects: clj-tiles, Obsidian Wielder, Cardigan Bay, Platypub Aug. 5th, 2022 - monthly - focusing on Oz  ml-study #\rThe ml-study group (on hold as of Feb. 2022) is about practicing the usage of the emerging Clojure data science stack. Most of its recordings have been shared internally at the Zulip chat. One of them was made public.\n Feb 28th 2021, 19:00 UTC - a public sessoin of the ml-study group about Notespace and Hanami - video  Scicloj talks #\r2021 #\r Feb 28th, 13:00 UTC - Anthony Khong' talk about fxl: a composable, data-oriented spreadsheet library - video Jan 28th, 4pm UTC - Alan Dipert: Common Lisp for the Curious Clojurian - details - video - slides  2020 #\r Dec 16th, 14:00 UTC (note the date change) - Nikita Prokopov about Skija \u0026ndash; graphics in the JVM - Video Dec 2nd, 14:00 UTC - Sicmutils #1 - geometry, symbolic math, and physics in Clojure(script) - background - video November 21st, 16:00 UTC - Joanne Cheng - Clojure in Geography #2 - video November 7th, 8pm UTC - Vlad Protsenko about Reveal: Read Eval Visualize Loop and cljfx - video November 1st., 6pm UTC - Clojure and data science in healthcare: Sivaram Arabandi \u0026amp; Pier Federico Gherardini - video October 3rd, 1pm-3pm UTC - Will Cohen - Clojure in Geography #1 - video September 26th, 1pm-2:30pm UTC - talks and discussion of machine learning libraries - video August 30th, 5pm-6:30pm UTC - public meeting with lightning talks and chat - video March 29th, 2pm-6pm UTC - COVID-19 online Hackathon - details here and here - video not published yet March 26th, 5pm-7pm UTC - Simon Belak - Exploratory analysis: automation, augmentation, and building tools for thought - video coming soon March 21st, 2pm-6pm UTC - COVID-19 online Hackathon - details here and here - video January 9th, 3pm-5pm UTC - Ludovic Courtès - Guix-Jupyter reproducible notebooks - video - slides - recap  2019 #\r October 28th, 6pm UTC - Tommi Reiman - Malli - video October 14th, 3pm UTC - Konrad Kühne - Datahike - video September 12th, 5pm UTC - Daniel Slutsky - R-interop - video August 29th, 5pm Jon Anthony - Hanami+Saite - video August 9th, 5pm UTC - Christopher Small - Oz - video Jul 18th, 5pm UTC - Chris Nuernberger - Libpython-clj - Alan Marazzi - Panthera - video June 20th, 2pm UTC - Martin Kavalar - Nextjournal - video May 15th, 10pm UTC - Carin Meier - Clojure MXNet - video April 15th, 3pm UTC - Chris Nuernberger - Tech.ml - video - transcript  Status reports #\rVisual-tools #\r Mar. 13th, 2022, Visual tools compatibility - video  Notespace #\r Nov. 29th, 2021, Notepace v4 status - video Aug. 19th 2021, Notespace v3 status - video Aug 24th, 2020, Notespace v3 status - video  "}).add({id:7,href:"/docs/community/groups/ds4clj/",title:"ds4clj: a data science course for Clojure devs",description:"A data science course for Clojure devs",content:" \r\r Following the recent broad support on Clojureverse and Reddit conversations and elsewhere, we will begin a data-science course for Clojure devs in ⭐ Fall 2022 ⭐.  The details below are tentative and will probably change.\nmeetings #\r 2022-07-24, initial brainstorming - event 2022-08-06, prep meeting about R \u0026amp; Tidyverse - event  goals #\r provide Clojure devs with basic theory, practices, and tools for common data science tasks;  also welcome open-minded people who are new to Clojure;   create learning resources for future use; encourage Clojurians to become active contributors to the emerging stack.  requirements #\r  at least one of the following:\n basic knowlede of Clojure a very open mind towards new programming languages    being ready to put a few hours a week into learning and practice, for a few months\n  chat #\r We\u0026rsquo;ll use a dedicated stream at the Clojurians Zulip chat. Stream: ds4clj It is recommended to follow a few of the other chat streams.  time #\r We\u0026rsquo;ll have a class once a month. We may have practice meetings in between. Each class is 3 hours, containing a lecture, a short break, and then discussion and Q\u0026amp;A.  recording #\r The meetings will be recorded and shared at the Clojurians Zulip chat. Some parts of the recordings (e.g. the lecture) will be shared publicly.  homework #\rHomework will be composed of:\n exercises on class topics personal projects (as individuals or in small groups) \u0026ndash; for example:  exploring datasets reproducing previously publushed research contributing to the stack of relevant libraries contributing to documentation    recommended resources #\r📖 [Clj4BT] Clojure for the Brave and True by Daniel Higginbotham\nThis is a great intro to Clojure.\nIt is useful for those who need a refresh with the language, or are new to it.\nNote: Chapter 2 suggests a specific development environment using Emacs (and is also a bit outdated). Emacs is wonderful, but it is not required for learning Clojure. Please reach out for help you wish to learn the book with another environment.\n📖 [R4DS] R for Data Science by Wickham and Grolemund\nThis is a good intro to the R language and its use in basic data-science tasks. It uses the Tidyverse collection of R packages and the so-called \u0026ldquo;tidy\u0026rdquo; approach, which is common in today\u0026rsquo;s R community.\nWe will use parts of it a basic intro to R. Knowing some R would make participants more independent in approaching study resources on their own. Python could have been another option, but we prefer R, since its ecosystem is arguably more in harmony with the functional approach and with expressing statistical ideas.\n📖 [Clj4DS] [Clojure for Data Science](https://www.packtpub.com/product/clojure-for-data-science/9781784397180** by Henry Garner\nThis is an excellent intro to data science topics, but it uses Clojure libraries which are not actively developed anymore.\nIt will be used for a few of the case studies, that we will adapt to this course.\nlist of topics (tentative) #\rlanguage #\r(mostly self learning)\n Clojure R  from today\u0026rsquo;s brainstorming:\ntheory \u0026amp; methods #\r(very basic intros)\n hello world: a typical workflow reshaping data (the \u0026ldquo;tidy\u0026rdquo; notion) correctness: testing, reproducibility descriptive statistics frequentist statistical inference supervised learning: principles \u0026amp; workflow, regression, classification working with tree-structured data probabilistic modelling through Bayesian statistics unsuprevised learning: clustering, dimension reduction linear algebra deep networks nlp async data streams graph data  libraries \u0026amp; tools #\r(some introduced briefly, some more thoroughly)\n tables: tablecloth, tech.ml.dataset arrays: dtype-next transducers: xforms, injest correctness (schemas): malli data vis \u0026amp; notebook tooling: portal, oz, clerk, clay data vis grammars: hanami, cljplot? math stats: fastmath, kixi.stats machine learning algorithms \u0026amp; pipelines: scicloj.ml interoperation w/ other languages: libpython-clj, clojisr Bayesian statistics: inferme, clj-stan tree data: clojure.walk, core.match, specter, meander, tupelo data ingestion: jdbc-next?, some web scraping, arrow? linear algebra, deep learning: neanderthal, deep-diamond parallel computing: geni, clojask nlp: datalinguist?, spacy through interop graph data: loom, asami, neo4j?  course plan (very tentative) #\r   month topic libraries homework      core topics           1 common workflow tablecloth, fastmath, hanami, learn some R and Clojure     scicloj.ml          2 descriptive stats, fastmath, kixi.stats apply to a real-world dataset    frequentist stats           3 data visualization hanami, cljplot? apply to a real-world dataset         4 arrays \u0026amp; tables dtype-next, tech.ml.dataset, apply to a real-world dataset,     tablecloth run some speed comparisons         5 basic supervised learning workflow, scicloj.ml, malli reproduce some kaggle notebooks    reproducibility, tests           6 probability, Bayesian stats inferme, clj-stan reading in Statistical Rethinking,      reproducing some examples         7 advanced supervised learning workflows scicloj.ml reproduce some kaggle notebooks,      explore variations \u0026amp; improvements         8 unsupervised learning fastmath, scicloj.ml reproduce some kaggle notebooks,      explore variations \u0026amp; improvements         9 python and R interop libpython-clj, clojisr go through some tutorials by      interop          specialized topics           10 working with tree-sructured data, clojure.walk, specter, meander, scrape \u0026amp; analyse some    web scraping hickory unstructured data         11 linear algebra, basic image processing neanderthal process some images         12 deep learning deep diamond reproduce some tutorials         13 async data streams xforms, kixi.stats analyse some user events         14 natural language processing datalinguist, analyse some texts,     spaCy through interop write rules to capture intents         15 graph data loom, asami, neo4j? analyse some graph data         16 big datasets geni, clojask, tech.ml.dataset query and analyse a big dataset,      run some speed comparisons          "}).add({id:8,href:"/docs/community/groups/data-recur/",title:"data-recur: recurring updates \u0026 discussions around building the emerging data stack",description:"recurring updates \u0026 discussions around building the emerging data stack",content:" \r\rThis group is a space for recurring updates \u0026amp; discussions around the emerging Clojure stack for data processing, analysis, and visualization.\n 2022-07-29 - meeting 1: clojure.walk, community updates - summary \u0026amp; video 2022-08-27 - meeting 2: clojask, ds4clj, and more - event  Organizer: Daniel Slutsky (please reach out at the Clojurians Zulip)\nFrequency of meetings: All-hands monthly meetings + ad-hoc meetings on specific topics\nChat stream: #data-recur\n"}).add({id:9,href:"/docs/community/groups/jointprob/",title:"jointprob: a probabilistic modelling and Bayesian statistics study group",description:"Probabilistic Modelling and Bayesian Statistics study group",content:" \r\rJointprob is a new study community for probabilistic modelling and Bayesian statistics, which started in August 2022.\nEven though the group is initiated by Scicloj \u0026ndash; a community for data science in Clojure \u0026ndash; this study group will not be focused on any single technology or programming language. Rather, it will be open to people of diverse technical backgrounds, and will continually seek dialogue and mutual inspiration across languages and technologies.\nMeetings #\r 2022-07-22, initial brainstorming - event 2022-08-13 - beginning of regular meetings (see the Groups below).  Joining #\rIt is never too late to join. We will help you to catch up.\nTo join the community and receive updates, please email us: scicloj@gmail.com. It\u0026rsquo;d be nice to mention your name, and as much as you wish, tell a bit about your background and interests.\nThere is no need to do that if you have already received emails about this group, if you have responded to our survey, or if you have registered to the initial brainstorming meeting.\nChat #\rThe group uses Zulip, an open-source chat platform. In some other groups we\u0026rsquo;ve been running, we\u0026rsquo;ve found it useful for chat, in-depth discussion threads, and knowledge management.\nOur Zulip organization is jointprob.zulipchat.com.\nYou may wish to learn a little bit about the concepts of Zulip streams and topics. Note that all streams and topics (and even single messages) have URLs, that you can open at separate tabs in your browser.\nIt would be wonderful to present yourself at the personal intros stream, preferably as a new topic thread.\nAgenda #\rWe will begin by learning one introductory book: Statistical Rethinking by Richard McElreath.\nThen, we will proceed with more advanced books and articles.\nBayesian statistics is tightly related to programming, and during our learning we will look into different programming languages and libraries.\nIn parallel to the main path of learning, we will encourage individual and small-group projects, and will share our progress with each other.\nSessions #\rWe meet once in two weeks to learn together for 90 minutes. The beginning of a session is typically be dedicated to following our main path of study (e.g., the current book chapter being read), with some hands-on exploration. Afterwards, we share our progress with the projects, and explore further.\nIn between those regular biweekly sessions, we encourage ad-hoc sessions to explore specialized topics or practice further.\nGroups #\rOur regular sessions take place in groups:\n   group start date time in UTC time zone     A Aug. 15th Mon 15:00 UTC   B Aug. 17th Wed 14:00 UTC   C Aug. 19th Fri 18:00 UTC   D Aug. 20th Sat 17:00 UTC     All groups meet every 2 weeks and follow roughly the same reading agenda. Hopefully, each one of us can usually attend one group (but is encouraged to join more sessions if comfortable). A typical session (~90 minutes) will have a brief overview of the relevant chapter(s) presented by a group member, and then a mostly a hands-on dive into examples, and a discussion. Group sessions will be recorded and shared internally in Zulip. Some parts (e.g., chapter overviews) can be made public on youtube. Each group will have its own rotation of moderators and presenters.  Recordings #\rSome parts of the sessions will be recorded and shared internally in the Zulip chat. Possibly, some recorded parts will be also shared publicly.\nProjects #\rParticipants will take on projects as individuals or in small groups.\nExample projects:\n read an article and share it with the group reimplement an example we\u0026rsquo;ve learned using a different technology explore a dataset with the methods learned  Recommended background #\rTo appreciate the content we are studying, it is recommended to have:\n some basic knowledge of probability and statistics (say, college level intro courses) some programming experience of any language (a few months) some experience exploring data an open mind  Principles #\rThe following core principles are typical to Scicloj study groups.\nNo experts. We do not assume that anybody in the group is an expert in the field. We come to learn together with a student mindset.\nA clear path. We will be very thoughtful about the agenda and about where we wish to go. We will continuously rethink and adapt our path going there.\nConfused together. It is just fine to be confused. We will be there together and seek clarity together.\nBeing active. The group encourages its members to learn independently and take on projects. In a sense, its purpose is (also) to support those individual journeys.\nMutual curiosity. We make serious efforts to be inclusive to participants of various backgrounds. The different perspectives of our friends are part of what we wish to learn.\nContact #\rIf you are interested, please reach out to us: scicloj@gmail.com\n"}).add({id:10,href:"/docs/community/groups/probabilistic-modelling-study-group/",title:"{renamed} probabilistic modelling study group",description:"{renamed} probabilistic modelling study group",content:" This group has been renamed as jointprob.\n"}).add({id:11,href:"/docs/community/groups/",title:"Dev \u0026 study groups",description:"The various dev groups and study groups organized by Scicloj",content:"Some parts of the Scicloj activity are driven by regular meetings in various groups.\n"}).add({id:12,href:"/docs/community/groups/visual-tools/",title:"visual-tools: regular updates \u0026 discussions around building visual tooling",description:"The visual-tools group",content:"The goal of this group is to create collaborations in learning and building Clojure tools for data visualization and literate programming.\nThe authors of several actively developed tools are involved (Chlorine, Clover, Calva, Portal, Viscous, Sidebar, Nette, Fabricate, Omni-trace, Oz, Saite, Notespace, Clay, Goldly, Saturn, clt-tiles, Obsidian Wielder, Cardigan Bay, Platypub, etc.).\n Meeting 1 - the beginning (Feb. 4th 2022) - summary \u0026amp; video. Meeting 2 - compatibility across tools (Feb. 19th 2022) - summary \u0026amp; video Meeting 3 - general montlhy meeting (Mar. 5th 2022) - summary \u0026amp; video Meeting 4 - studying Clerk internals (Mar. 25th 2022) - summary \u0026amp; video Meeting 5 - general monthly (Apr. 2nd 2022) - summary \u0026amp; video Meeting 6 - general monthly (May. 6th 2022) - summary \u0026amp; video Meeting 7 - a deep dive into Saturn (May. 27th 2022) - summary \u0026amp; video Meeting 8 - general monthly (June 3rd 2022): data cookbook, goldly studio, re-frame state management - summary \u0026amp; video Meeting 9 - general monthly (July 2nd 2022): clj-tiles, Obsidian Wielder, Cardigan Bay, Platypub - summary \u0026amp; video Meeting 10 - monthly meeting (Aug. 5th 2022): Oz - summary \u0026amp; video  Organizers: Lukas Domalga, Kira McLean, Daniel Slutsky (please reach out at the Clojurians Zulip)\nFrequency of meetings: All-hands meeting roughly every month + ad-hoc meetings of sub-groups on specific topics\nChat stream: #visual-tools at Clojurians Zulip and at Clojurians Slack\nResources: You are invited to add your experiments and notes.\n  relevant tools and libraries\n  scicloj/visual-tools-experiments - repo for collaboration.\n  common notes - from meetings, etc.\n  background - the visual tools session at the re:Clojure Data Science Special (Dec. 5th 2021), overviewing some of the relevant tools in the field\n  Video status reports:\n Mar. 13th, 2022, Visual tools compatibility - describing the Portal-Clerk-Kindly-nREPL experiment    "}).add({id:13,href:"/docs/community/groups/wolfram-clojure-bridge/",title:"wolfram-clojure-bridge: discussing the usage and development of the bridge to Wolfram Language",description:"The Wolfram-Clojure bridge group",content:"The wolfram-clojure-bridge discusses the usage and development of the bridge to Wolfram Language.\nWhen we meet, we spend the time with overviews of new developments, discussion of language design and library design, and explorations of the Wolfram Language ecosystem.\nFor more background about the project, please see the Dec. 5th 2021 talk of the maintainer, Pawel Ceranka.\nOrganizer: Pawel Ceranka (please reach out to prnc at the Clojurians Zulip)\nTime of meetings: Last Thurdsday of every month, at 18:00 UTC\nChat stream: #wolfram-clojure-bridge\n"}).add({id:14,href:"/docs/community/groups/ml-study/",title:"{on hold} ml-study: practicing the use of the emerging stack",description:"The ml-study group",content:"(this group is on hold)\nThe ml-study group has been a space for regular meetings for practicing the usage of the emerging Clojure data science stack.\nIt has been serving us not only in learning, but also in testing the emerging stack and creating a collection of usage examples.\nOrganizer: Daniel Slutsky (please reach out at the Clojurians Zulip)\nChat stream: #ml-study\n"}).add({id:15,href:"/docs/community/groups/real-world-data/",title:"{on hold} real-world-data: discussions of real-world data problems",description:"The real-world-data group",content:"(this group is on hold)\nThe real-world-data group is about the use of Clojure for real-world data problems.\nThe goal is to create a space where individuals, companies, academic groups, and organizations are able to share their experiences in using Clojure for data-centric projects. Data analytics, machine learning, AI, data engineering, scientific computing, and data visualization are all welcome.\nWe want it to be a safe space, that would be comfortable for sharing successes, troubles, problems, hopes, and doubts. We want it to be useful not only for those who use mostly Clojure but also for those who are curious-but-doubtful.\n Meeting 1 - the beginning (Feb. 25th 2022) - announcement - video coming soon  Organizers: João Santiago and Daniel Slutsky (please reach out at the Clojurians Zulip)\nTypical frequency of meetings: once a couple of months\nChat stream: #real-world-data\n"}).add({id:16,href:"/docs/community/groups/sci-fu/",title:"{on hold} sci-fu: regular discussions of various dev projects",description:"The sci-fu group",content:"(this group is on hold)\nThe sci-fu (Scicloj foundations) has been a space for regular discussions of various dev projects.\nIn a sense, it is a study group where we learn how to contribute to the ecosystem \u0026ndash; For a few of us, sci-fu has been a place to discuss our first steps as open-source contributors.\nIn another sense, it is a dev group where we discuss common priorities, share our progress and challenges, and explore future directions.\nTypically, each session has one or two main topics, that we dive into together. Sci-fu has been a place for us to learn some of the fundamental building blocks of the emerging Clojure data stack, such as the dtype-next library for high-performance data.\nOrganizer: Ethan Miller (please reach out at the Clojurians Zulip)\nTypical time of meetings: on hold at the moment\nChat stream: #sci-fu\n"}).add({id:17,href:"/docs/community/groups/sicmutils/",title:"{on hold} sicmutils: studying the sicmutils library, physics, and geometry",description:"The sicmutils group",content:"(this group is on hold)\nThe sicmutils group has been studying the Sicmutils computer algebra system and the SICM book, and discussing various projects by group members around the topics of math and physics in Clojure.\nIts explorations have affected the development of some of our tools and libraries for data-visualization and literate programming, among other things.\nOrganizer: Daniel Slutsky (please reach out at the Clojurians Zulip)\nTypical time of meetings: ad hoc meetings by group members' initiatives\nChat stream: #sicmutils\n"}).add({id:18,href:"/docs/community/",title:"Community",description:"Getting to know the Scicloj community",content:""}).add({id:19,href:"/docs/resources/",title:"Resources",description:"Resources for data science in Clojure",content:""}).add({id:20,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()